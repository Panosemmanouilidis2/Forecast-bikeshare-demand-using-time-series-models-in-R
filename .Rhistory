## Import required packages
install.packages("timetk")  # Install timetk package if not already installed
library(timetk)  # Load timetk package
data("bike_sharing_daily")  # Load the built-in R dataset
# Load the required package
library(plotly)
# Create interactive time series plot
plot_ly(data = bike_sharing_daily, x = ~dteday, y = ~cnt, type = "scatter", mode = "lines") %>%
layout(title = "Daily Bike Rental Count",
xaxis = list(title = "Date"),
yaxis = list(title = "Count"))
# STEP 1: Importing Libraries
library(tidyverse)
library(dplyr)
library(lubridate)
library(rmarkdown)
library(pandoc)
library(tinytex)
library(ggplot2)
library(tidyr)
library(forecast)
library(openxlsx)
library(gridExtra)
library(scales)
library(xts)
library(reshape2)
library(e1071)
library(caret)
library(forecast)
# Setting the Working Directory
setwd("C:\\Panos\\Time Series Analysis in R\\Forecast Daily Bike Rental")
setwd("~/OneDrive - Unilever/Documents/Time Series Analysis in R/Forecast Daily Bike Rental")
# STEP 2: Importing Datasets
daily_rental <- read.csv("day.csv")
hourly_rental <- read.csv("hour.csv")
daily_rental <- daily_rental %>%
mutate(Date = as.Date(dteday, format = "%Y-%m-%d")) %>%
select(-dteday)
hourly_rental <- hourly_rental %>%
mutate(Date = as.Date(dteday, format = "%Y-%m-%d")) %>%
select(-dteday)
set.seed(123)
train_index <- createDataPartition(daily_rental$instant, p = 0.8, list = FALSE)
# Subset the data using the created indices
train_data <- daily_rental[train_index, ]
test_data <- daily_rental[-train_index, ]
# STEP 6: Handle Outliers in Training Data
# Handling outliers for casual users
train_data_remove_casual <- train_data %>%
filter(abs((casual - mean(casual)) / sd(casual)) <= 3)  # Keep only non-outliers
summary(train_data_remove_casual$casual)
ggplot(train_data_remove_casual, aes(x = casual)) +
geom_histogram(binwidth = 100, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Casual Users", x = "Casual Users", y = "Frequency")
ggplot(train_data_remove_casual, aes(y = casual)) +
geom_boxplot(fill = "orange", alpha = 0.7) +
labs(title = "Boxplot of Casual Users", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = Date, y = casual)) +
geom_line(color = "green") +
labs(title = "Time Series of Casual Users", x = "Date", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = temp, y = casual)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Casual Users vs Temperature", x = "Temperature", y = "Casual Users")
daily_rental <- daily_rental %>%
mutate(Date = as.Date(dteday, format = "%Y-%m-%d")) %>%
select(-dteday)
# Ensure the Date column in train_data_remove_casual is correctly formatted
train_data_remove_casual <- train_data_remove_casual %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
train_data_remove_casual <- train_data_remove_casual %>%
mutate(month = factor(month(Date, label = TRUE), levels = month.abb))
ggplot(train_data_remove_casual, aes(x = month, y = casual)) +
geom_boxplot(fill = "cyan", alpha = 0.7) +
labs(title = "Monthly Distribution of Casual Users", x = "Month", y = "Casual Users")
train_data_remove_casual <- train_data_remove_casual %>%
mutate(day_of_week = wday(Date, label = TRUE))
ggplot(train_data_remove_casual, aes(x = month, y = casual)) +
geom_boxplot(fill = "cyan", alpha = 0.7) +
labs(title = "Monthly Distribution of Casual Users", x = "Month", y = "Casual Users")
# Extract day of the week
train_data_remove_casual <- train_data_remove_casual %>%
mutate(day_of_week = wday(Date, label = TRUE))
train_data_remove_casual <- train_data_remove_casual %>%
mutate(day_of_week = wday(Date, label = TRUE))
ggplot(train_data_remove_casual, aes(x = day_of_week, y = casual)) +
geom_boxplot(fill = "magenta", alpha = 0.7) +
labs(title = "Day of Week Distribution of Casual Users", x = "Day of Week", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = temp, y = casual)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Casual Users vs Temperature", x = "Temperature", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = atemp, y = casual)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "blue") +
labs(title = "Casual Users vs Apparent Temperature", x = "Apparent Temperature", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = hum, y = casual)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "green") +
labs(title = "Casual Users vs Humidity", x = "Humidity", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = windspeed, y = casual)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "purple") +
labs(title = "Casual Users vs Windspeed", x = "Windspeed", y = "Casual Users")
numeric_vars <- train_data_remove_casual %>%
select_if(is.numeric)
cor_matrix <- cor(numeric_vars)
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method = "circle",
colors = c("red", "white", "blue"),
title = "Correlation Heatmap",
ggtheme = theme_minimal())
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method = "circle",
colors = c("red", "white", "blue"),
title = "Correlation Heatmap",
ggtheme = theme_minimal())
ggplot(train_data_remove_casual, aes(y = casual)) +
geom_boxplot(fill = "orange", alpha = 0.7) +
labs(title = "Boxplot of Casual Users", y = "Casual Users")
ggplot(train_data_remove_casual, aes(x = Date, y = casual)) +
geom_line(color = "green") +
labs(title = "Time Series of Casual Users", x = "Date", y = "Casual Users")
monthly_avg_casual <- train_data_remove_casual %>%
group_by(YearMonth) %>%
dplyr::summarise(AverageCasualUsers =mean(casual))
# Print the resulting DataFrame
print(monthly_avg_casual)
View(train_data_remove_casual)
glimpse(train_data_remove_casual)
monthly_avg_casual <- train_data_remove_casual %>%
group_by(Date) %>%
dplyr::summarise(AverageCasualUsers =mean(casual))
print(monthly_avg_casual)
monthly_avg_casual$Date <- as.Date(paste0("01-", monthly_avg_casual$YearMonth), format = "%d-%b-%y")
monthly_avg_casual$Date <- as.Date(paste0("01-", monthly_avg_casual$Date), format = "%d-%b-%y")
monthly_avg_casual <- monthly_avg_casual %>%
arrange(Date)
print(monthly_avg_casual)
ggplot(monthly_avg_casual, aes(x = Date, y = AverageCasualUsers, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(monthly_avg_casual$AverageCasualUsers, na.rm = TRUE))) +
theme(axis.text.x = element_text(vjust = 5, margin = margin(-6, 0, 0, 0))) +
guides(y = "none")
ggplot(monthly_avg_casual, aes(x = Date, y = AverageCasualUsers, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users")
ggplot(monthly_avg_casual, aes(x = Date, y = AverageCasualUsers, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2)
ggplot(monthly_avg_casual, aes(x = Date, y = AverageCasualUsers, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(monthly_avg_casual$AverageCasualUsers, na.rm = TRUE))) +
theme(axis.text.x = element_text(vjust = 5, margin = margin(-6, 0, 0, 0))) +
guides(y = "none")
if (any(!is.na(monthly_avg_casual$AverageCasualUsers))) {
ggplot(monthly_avg_casual, aes(x = Date, y = AverageCasualUsers, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(monthly_avg_casual$AverageCasualUsers, na.rm = TRUE))) +
theme(axis.text.x = element_text(vjust = 5, margin = margin(-6, 0, 0, 0))) +
guides(y = "none")
} else {
print("No non-NA values in AverageCasualUsers")
}
ggplot(train_data_remove_casual, aes(x = Date, y = casual)) +
geom_line() +
labs(x = "Date", y = "Number of Casual Users", title = "Casual Users Over Time")
#Project Oto conduct a time series data analysis to forecast future rental bike demands
#importing libraries
library(tidyverse)
library(dplyr)
library(lubridate)
library("rmarkdown")
library(pandoc)
library(tinytex)
library(ggplot2)
library(tidyr)
library(forecast)
library(openxlsx)
library(gridExtra)
#setting the Working Directory
setwd("~/Time Series Analysis in R/Forecast Daily Bike Rental")
#importing datasets
daily_rental<- read.csv("day.csv")
hourly_rental<- read.csv("day.csv")
daily_rental <- daily_rental %>%
mutate(Date = as.Date(dteday)) %>%
select(-dteday)
glimpse(daily_rental)
hourly_rental <- hourly_rental %>%
mutate(Date = as.Date(dteday)) %>%
select(-dteday)
glimpse(hourly_rental)
#Checking for outliers-DATA CLEANSING
#No outliers found in the daily_rental dataset and I assume this is the case for hourly_rental
daily_rental%>%
ggplot()+
geom_boxplot(mapping=aes(cnt))
daily_rental%>%
ggplot()+
geom_boxplot(mapping=aes(AggCasualandReg))
daily_rental%>%
ggplot()+
geom_boxplot(mapping=aes(temp))
daily_rental%>%
ggplot()+
geom_boxplot(mapping=aes(temp))
#DATA INTEGRITY
#we have 2011 and 2012 data(0 and 1 respectively)
#Clear or Few Clouds (Category 1),Partly Cloudy (Category 2),Cloudy or Overcast (Category 3) (Documentation is missing)
#weekdays 0,1,2,3,4,5,6(7 week days)
#workingday:0,1(I assume it's saturday and Sunday)
#4 seasons
#holiday: 0 is non holiday day and 1 is a bank holiday
unique(daily_rental$yr)
unique(hourly_rental$yr)
unique(daily_rental$mnth)
unique(hourly_rental$mnth)
unique(daily_rental$weekday)
unique(hourly_rental$weekday)
unique(daily_rental$workingday)
unique(hourly_rental$workingday)
unique(daily_rental$season)
unique(hourly_rental$season)
unique(daily_rental$holiday)
unique(hourly_rental$holiday)
#Checking if casual and registered columns=cnt
#It is confirmed that cnt=registered+casual
daily_rental <- daily_rental %>%
mutate(AggCasualandReg=casual+registered)
hourly_rental <- hourly_rental %>%
mutate(AggCasualandReg=casual+registered)
glimpse(daily_rental)
diff<- daily_rental$AggCasualandReg-daily_rental$cnt
diffhourly<- hourly_rental$AggCasualandReg-hourly_rental$cnt
unique(diff)
unique(diffhourly)
#Checking of datasets
glimpse(hourly_rental)
glimpse(daily_rental)
ts_data_temp <- ts(daily_rental$temp, start = c(year(min(daily_rental$Date)), as.numeric(format(min(daily_rental$Date), "%j"))),
frequency = 365)  # Assuming daily data
# Plotting
plot(ts_data_temp, xlab = "Date", ylab = "Temperature", main = "Temperature Over Time")
#Casual users
# Create a time series object
ts_data_casualmonthly <- ts(daily_rental$casual, start = c(2011,1), end =c(2012,12),
frequency = 12)  # Assuming monthly data
ts_data_casualmonthly
ts_data_casual_weekly <- ts(daily_rental$casual, start = c(2011,1), end =c(2012,12),
frequency = 52)  # Assuming weekly data
ts_data_casual_daily <- ts(daily_rental$casual, start = c(2011,1), end =c(2012,12),
frequency = 365)  # Assuming dailyly data
# Plotting
plot(ts_data_casualmonthly, xlab = "Date", ylab = "Casual Users", main = "Casual Users Monthly")
plot(ts_data_casual_weekly, xlab = "Date", ylab = "Casual Users", main = "Casual Users over Weekly")
#plot(ts_data_casual_daily, xlab = "Date", ylab = "Casual Users", main = "Casual Users over Daily")
#The above plot didn't show a clear trend so i will use ggplot for more customised plots
daily_rental <- daily_rental %>%
mutate(Month_Year = paste(substr(month(Date, label = TRUE), 1, 3), format(Date, "%y"), sep = "-"))
# Modify Month_Year variable
monthly_temp <- monthly_temp %>%
mutate(Month_Year = paste(substr(Month_Year, 1, 3), substr(Month_Year, 5, 6), sep = "-"))
daily_rental <- daily_rental %>%
mutate(Month_Year = paste(substr(month(Date, label = TRUE), 1, 3), format(Date, "%y"), sep = "-"))
monthly_casual <- daily_rental %>%
group_by(Month_Year) %>%
summarize(Avg_Casual_Users = mean(casual))
# Aggregate data by month-year and calculate the average reg users
monthly_registered <- daily_rental %>%
group_by(Month_Year) %>%
summarize(Avg_Registered_Users = mean(registered))
# Aggregate data by month-year and calculate the average temperature
monthly_temp <- daily_rental %>%
group_by(Month_Year) %>%
summarize(Avg_Temp = mean(temp))
monthly_casual <- monthly_casual %>%
mutate(Month_Year = paste(substr(Month_Year, 1, 3), substr(Month_Year, 5, 6), sep = "-"))
monthly_registered<- monthly_registered %>%
mutate(Month_Year = paste(substr(Month_Year, 1, 3), substr(Month_Year, 5, 6), sep = "-"))
monthly_temp <- monthly_temp %>%
mutate(Month_Year = paste(substr(Month_Year, 1, 3), substr(Month_Year, 5, 6), sep = "-"))
monthly_casual_filtered <- monthly_casual %>%
filter(!Month_Year %in% c("Dec-10", "Jan-13"))
monthly_registered_filtered <- monthly_registered %>%
filter(!Month_Year %in% c("Dec-10", "Jan-13"))
monthly_temp_filtered <- monthly_temp %>%
filter(!Month_Year %in% c("Dec-10", "Jan-13"))
plot_casual<- ggplot(monthly_casual_filtered, aes(x = as.Date(paste("01", Month_Year, sep = "-"), format = "%d-%b-%y"), y = Avg_Casual_Users)) +
geom_line() +
scale_x_date(breaks = as.Date(paste0("01-", unique(monthly_casual_filtered$Month_Year)), format = "%d-%b-%y"),
labels = unique(monthly_casual_filtered$Month_Year), date_labels = "%b-%y") +
labs(title = "Average Casual Users by Month-Year",
x = "Month-Year",
y = "Average Casual Users") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Adjust angle and alignment
axis.text = element_text(size = 8))  # Reduce font size
plot_casual
glimpse(train_data_remove_casual)
ggplot(train_data_remove_casual, aes(x = Date, y = casual, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(train_data_remove_casual$casual, na.rm = TRUE))) +
theme(axis.text.x = element_text(vjust = 5, margin = margin(-6, 0, 0, 0))) +
guides(y = "none")
plot_casual<- ggplot(monthly_casual_filtered, aes(x = as.Date(paste("01", Month_Year, sep = "-"), format = "%d-%b-%y"), y = Avg_Casual_Users)) +
geom_line() +
scale_x_date(breaks = as.Date(paste0("01-", unique(monthly_casual_filtered$Month_Year)), format = "%d-%b-%y"),
labels = unique(monthly_casual_filtered$Month_Year), date_labels = "%b-%y") +
labs(title = "Average Casual Users by Month-Year",
x = "Month-Year",
y = "Average Casual Users") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Adjust angle and alignment
axis.text = element_text(size = 8))  # Reduce font size
plot_casual
library(scales)
train_data_remove_casual <- train_data_remove_casual %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Create a new column for the formatted date
train_data_remove_casual$Date_MM_YY <- format(train_data_remove_casual$Date, "%m/%y")
ggplot(train_data_remove_casual, aes(x = Date_MM_YY, y = casual, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(train_data_remove_casual$casual, na.rm = TRUE))) +
theme(axis.text.x = element_text(vjust = 5, margin = margin(-6, 0, 0, 0))) +
guides(y = "none")
train_data_remove_casual$Date_MM_YY <- format(train_data_remove_casual$Date, "%m/%y")
ggplot(train_data_remove_casual, aes(x = Date_MM_YY, y = casual, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(train_data_remove_casual$casual, na.rm = TRUE))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
guides(y = "none")
library(scales)
train_data_remove_casual <- train_data_remove_casual %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
ggplot(train_data_remove_casual, aes(x = Date, y = casual, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Number of Casual Users Per Month",
x = "Month-Year",
y = "Average Number of Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(train_data_remove_casual$casual, na.rm = TRUE))) +
scale_x_date(date_labels = "%m/%y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
guides(y = "none")
plot_casual<- ggplot(monthly_casual_filtered, aes(x = as.Date(paste("01", Month_Year, sep = "-"), format = "%d-%b-%y"), y = Avg_Casual_Users)) +
geom_line() +
scale_x_date(breaks = as.Date(paste0("01-", unique(monthly_casual_filtered$Month_Year)), format = "%d-%b-%y"),
labels = unique(monthly_casual_filtered$Month_Year), date_labels = "%b-%y") +
labs(title = "Average Casual Users by Month-Year",
x = "Month-Year",
y = "Average Casual Users") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Adjust angle and alignment
axis.text = element_text(size = 8))  # Reduce font size
plot_casual
ggplot(train_data_remove_casual, aes(x = Date, y = casual, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
theme_minimal() +
labs(title = "Average Casual Users by Month-Year",
x = "Month-Year",
y = "Average Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(train_data_remove_casual$casual, na.rm = TRUE))) +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
guides(y = "none")
plot_casual<- ggplot(monthly_casual_filtered, aes(x = as.Date(paste("01", Month_Year, sep = "-"), format = "%d-%b-%y"), y = Avg_Casual_Users)) +
geom_line() +
scale_x_date(breaks = as.Date(paste0("01-", unique(monthly_casual_filtered$Month_Year)), format = "%d-%b-%y"),
labels = unique(monthly_casual_filtered$Month_Year), date_labels = "%b-%y") +
labs(title = "Average Casual Users by Month-Year",
x = "Month-Year",
y = "Average Casual Users") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Adjust angle and alignment
axis.text = element_text(size = 8))  # Reduce font size
plot_casual
ggplot(train_data_remove_casual, aes(x = Date, y = casual, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a trend line
theme_minimal() +
labs(title = "Average Casual Users by Month-Year",
x = "Month-Year",
y = "Average Casual Users") +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
scale_y_continuous(limits = c(0, max(train_data_remove_casual$casual, na.rm = TRUE))) +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
guides(y = "none")
